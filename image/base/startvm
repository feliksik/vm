#!/bin/bash

#set -x

# For debugging
if [ "$1" = "bash" ]; then
  exec bash
fi


# These two variables can be overwritten

: ${KVM_BLK_OPTS:="-drive file=\$KVM_IMAGE,if=none,id=drive-disk0,format=qcow2 \
-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x6,drive=drive-disk0,id=virtio-disk0,bootindex=1"}
: ${KVM_NET_OPTS:="-netdev bridge,br=\$BRIDGE_IFACE,id=net0 \
-device virtio-net-pci,netdev=net0,mac=\$MAC"}


# Pass Docker command args to kvm
KVM_ARGS=$@

BASEDIR=/base_image

BASE_IMAGE_PATH=$BASEDIR/$IMAGE

BASE_IMAGE_FILE=$BASE_IMAGE_PATH
# use $IMAGE subdir/file if supplied. 
# if resulting BASE_IMAGE is a dir, use the first file found.
if [ -d "$BASE_IMAGE_PATH" ]; then
  # use the first file as base image
  BASE_IMAGE_FILE=$BASEDIR/$(ls -p $BASE_IMAGE_PATH | grep -v "/" | head -n1)
  echo "Specified image $BASE_IMAGE_PATH is a directory. Using file $BASE_IMAGE_FILE"
fi

# resolve symlink as 'qemu-img create' doesn't like symlink
BASE_IMAGE_FILE=$(readlink -e $BASE_IMAGE_FILE)

# Create the qcow disk image on the Docker volume named /image, using
# the compressed qcow image that came with Docker image as the base.
# Docker volumes typically perform better than the file system for
# Docker images (no need for overlay fs etc.)

if [ ! -d "/image" ]; then
  echo "/image directory does not exist, failed to mount volume /image?"
  exit 2
fi

KVM_IMAGE=/image/sda.qcow2
if [ ! -f "$KVM_IMAGE" ]; then
  qemu-img create -f qcow2 -b $BASE_IMAGE_FILE \
  $KVM_IMAGE > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Failed to create qcow2 image"
    exit 3
  fi
fi

# Network setup:
#
# 1. Create a bridge named br0
# 2. Remove IP from eth0, save eth0 MAC, give eth0 a random MAC

function atoi
{
  #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
  IP=$1; IPNUM=0
  for (( i=0 ; i<4 ; ++i )); do
  ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
  IP=${IP#*.}
  done
  echo $IPNUM 
} 
 
function itoa
{
  #returns the dotted-decimal ascii form of an IP arg passed in integer format
  echo -n $(($(($(($((${1}/256))/256))/256))%256)).
  echo -n $(($(($((${1}/256))/256))%256)).
  echo -n $(($((${1}/256))%256)).
  echo $((${1}%256)) 
}

cidr2mask() {
  local i mask=""
  local full_octets=$(($1/8))
  local partial_octet=$(($1%8))

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
      mask+=255
    elif [ $i -eq $full_octets ]; then
      mask+=$((256 - 2**(8-$partial_octet)))
    else
      mask+=0
    fi
    test $i -lt 3 && mask+=.
  done

  echo $mask
}


IFACE=eth0
BRIDGE_IFACE=br0


MAC=`ip addr show $IFACE | grep ether | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g' | cut -f2 -d ' '`
IP=`ip addr show dev $IFACE | grep "inet $IP_PREFIX" | awk '{print $2}' | cut -f1 -d/`
CIDR=`ip addr show dev $IFACE | grep "inet $IP_PREFIX" | awk '{print $2}' | cut -f2 -d/`
NETMASK=`cidr2mask $CIDR`
GATEWAY=`ip route get 8.8.8.8 | grep via | cut -f3 -d ' '`
NAMESERVER=( `grep nameserver /etc/resolv.conf | cut -f2 -d ' '` )
NAMESERVERS=`echo ${NAMESERVER[*]} | sed "s/ /,/"`

cat > /etc/dnsmasq.conf << EOF
user=root
dhcp-range=$IP,$IP
dhcp-host=$MAC,$HOSTNAME,$IP,infinite
dhcp-option=option:router,$GATEWAY
dhcp-option=option:netmask,$NETMASK
dhcp-option=option:dns-server,$NAMESERVERS
EOF

if [ -z $NO_DHCP ]; then
    dnsmasq
fi

# Generate random new MAC address
hexchars="0123456789ABCDEF"
end=$( for i in {1..8} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
NEWMAC=`echo 06:FE$end`

let "NEWCIDR=$CIDR-1"
#NEWNETMASK=`cidr2mask $NEWCIDR`
 
i=`atoi $IP`
let "i=$i^(1<<$CIDR)"
NEWIP=`itoa i`

ip link set dev $IFACE down
ip link set $IFACE address $NEWMAC
ip addr del $IP/$CIDR dev $IFACE

brctl addbr $BRIDGE_IFACE
brctl addif $BRIDGE_IFACE $IFACE
ip link set dev $IFACE up
ip link set dev $BRIDGE_IFACE up
ip addr add $NEWIP/$NEWCIDR dev $BRIDGE_IFACE

if [[ $? -ne 0 ]]; then
    echo "Failed to bring up network bridge"
    exit 4
fi

# Exec kvm as PID 1

echo allow $BRIDGE_IFACE >  /etc/qemu/bridge.conf 

# If /ranchervm does not exist, we still proceed with running KVM. We just
# won't get a VNC console socket.

if [ -d /ranchervm ]; then
    DOCKERID=`grep "/docker" /proc/self/cgroup | cut -f 3 -d / | cut -f 2 -d - | cut -f 1 -d . | head -1`
    mkdir -p /ranchervm/vm/$DOCKERID
    VNC="-vnc unix:/ranchervm/vm/$DOCKERID/vnc"
    echo VNC server will listen on Unix socket /ranchervm/vm/$DOCKERID/vnc
fi

exec kvm $VNC `eval echo $KVM_BLK_OPTS` `eval echo $KVM_NET_OPTS` $KVM_ARGS
